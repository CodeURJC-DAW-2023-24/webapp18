package es.codeurjc.restcontroller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Optional;

import org.apache.catalina.connector.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

import es.codeurjc.DTO.OfferDTO;
import es.codeurjc.model.Lifeguard;
import es.codeurjc.model.Offer;
import es.codeurjc.employerservice.OfferService;
import es.codeurjc.employerservice.PoolService;
import es.codeurjc.employerservice.UserService;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PostMapping;



@RestController
public class UserRestController {
     @Autowired
    private PoolService poolService;

    @Autowired
    private OfferService offerService;

    @Autowired
    private UserService userService;

    @Autowired
    private LifeguardRepository lifeguardService;

    @Autowired
    private EmployerRepository employerService;

    @GetMapping("/api/me")
	public Object me(HttpServletRequest request) {
        String mail = request.getUserPrincipal().getName();

        Optional<Employer> employer = employerRepository.findByMail(mail);
        Optional<Lifeguard> lifeguard = lifeguardRepository.findByMail(mail);
        Collection<Offer> offers = offerService.findAll();

		if (employer.isPresent()) {
            return (new EmployerDTO(employer.get()))

        } else if (lifeguard.isPresent()) {
            return (new lifeguardDTO(lifeguard.get()))

		}else return null;
	}

    @GetMapping("/api/lifeguard/{id}")
    public LifeguardDTO getLifeguard(@PathVariable int id){ 
        Optional<Lifeguard> lifeguard = lifeguardService.findById(id);
        if (lifeguard.isPresent()) return (new LifeguardDTO(lifeguard.get()));
        else return null;
    }

    @GetMapping("/api/employer/{id}")
    public LifeguardDTO getLifeguard(@PathVariable int id){ 
        Optional<Employer> employer = employerService.findById(id);
        if (employer.isPresent()) return (new EmployerDTO(employer.get()));
        else return null;
    }

    @DeleteMapping("/api/lifeguard/{id}")
    public String deleteLifeguard(@PathVariable int id){ //Only for admin and owner
        lifeguardService.deleteById(id);
        return "Se ha borrado correctamente";
    }

    @DeleteMapping("/api/employer/{id}")
    public String deleteEmployer(@PathVariable int id){ //Only for admin and owner
        employerService.deleteById(id);
        return "Se ha borrado correctamente";
    }

    @PostMapping("/api/lifeguard/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public Lifeguard createLifeguard(@RequestBody Lifeguard lifeguard) {

		lifeguardService.save(lifeguard);

		return lifeguard;
	}

    @PostMapping("/api/employer/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public Employer createEmployer(@RequestBody Employer employer) {

		employerService.save(employer);

		return employer;
	}

    @PutMapping("/api/lifeguard/{id}")
	public ResponseEntity<Lifeguard> updateLifeguard(@PathVariable long id, @RequestBody Lifeguard updatedLifeguard) throws SQLException {

		if (lifeguardService.exist(id)) {

			if (updatedLifeguard.getImageUser()) {
				Lifeguard dbLifeguard = lifeguardService.findById(id).orElseThrow();
				if (dbLifeguard.getImageUser()) {
					updatedLifeguard.setPhotoUser(BlobProxy.generateProxy(dbLifeguard.getPhotoUser().getBinaryStream(),
							dbLifeguard.getPhotoUser().length()));
				}
			}

			updatedLifeguard.setId(id);
			lifeguardService.save(updatedLifeguard);

			return new ResponseEntity<>(updatedLifeguard, HttpStatus.OK);
		} else	{
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

    @PutMapping("/api/employer/{id}")
	public ResponseEntity<Employer> updateEmployer(@PathVariable long id, @RequestBody Lifeguard updatedEmployer) throws SQLException {

		if (employerService.exist(id)) {

			if (updatedEmployer.getImageCompany()) {
				Employer dbEmployer = employerService.findById(id).orElseThrow();
				if (dbEmployer.getImageCompany()) {
					updatedEmployer.setPhotoCompany(BlobProxy.generateProxy(dbEmployer.getPhotoCompany().getBinaryStream(),
							dbEmployer.getPhotoCompany().length()));
				}
			}

			updatedEmployer.setId(id);
			employerService.save(updatedEmployer);

			return new ResponseEntity<>(updatedEmployer, HttpStatus.OK);
		} else	{
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}


    @PostMapping("/api/employer/{id}/photoCompany")
	public ResponseEntity<Object> uploadPhotoCompany(@PathVariable long id, @RequestParam MultipartFile imageFile)
			throws IOException {

		Employer employer = employerService.findById(id).orElseThrow();

		URI location = fromCurrentRequest().build().toUri();

		employer.setImageCompany(true);
		employer.setPhotoCompany(BlobProxy.generateProxy(imageFile.getInputStream(), imageFile.getSize()));
		employerService.save(employer);

		return ResponseEntity.created(location).build();
	}

	@GetMapping("/api/employer/{id}/photoCompany")
	public ResponseEntity<Object> downloadPhotoCompany(@PathVariable long id) throws SQLException {

		Employer employer = employerService.findById(id).orElseThrow();

		if (employer.getPhotoCompany() != null) {

			Resource file = new InputStreamResource(employer.getPhotoCompany().getBinaryStream());

			return ResponseEntity.ok().header(HttpHeaders.CONTENT_TYPE, "image/jpeg")
					.contentLength(employer.getPhotoCompany().length()).body(file);

		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@DeleteMapping("/api/employer/{id}/photoCompany")
	public ResponseEntity<Object> deletePhotoCompany(@PathVariable long id) throws IOException {

		Employer employer = employerService.findById(id).orElseThrow();

		employer.setPhotoCompany(null);
		employer.setImageCompany(false);

		employerService.save(employer);

		return ResponseEntity.noContent().build();
	}

    @PostMapping("/api/lifeguard/{id}/photoUser")
	public ResponseEntity<Object> uploadPhotoUser(@PathVariable long id, @RequestParam MultipartFile imageFile)
			throws IOException {

		Employer lifeguard = lifeguardService.findById(id).orElseThrow();

		URI location = fromCurrentRequest().build().toUri();

		lifeguard.setImageUser(true);
		lifeguard.setPhotoUser(BlobProxy.generateProxy(imageFile.getInputStream(), imageFile.getSize()));
		lifeguardService.save(lifeguard);

		return ResponseEntity.created(location).build();
	}

	@GetMapping("/api/lifeguard/{id}/photoUser")
	public ResponseEntity<Object> downloadPhotoUser(@PathVariable long id) throws SQLException {

		Lifeguard lifeguard = lifeguardService.findById(id).orElseThrow();

		if (lifeguard.getPhotoUser() != null) {

			Resource file = new InputStreamResource(lifeguard.getPhotoUser().getBinaryStream());

			return ResponseEntity.ok().header(HttpHeaders.CONTENT_TYPE, "image/jpeg")
					.contentLength(lifeguard.getPhotoUser().length()).body(file);

		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@DeleteMapping("/api/lifeguard/{id}/photoUser")
	public ResponseEntity<Object> deletePhotoUser(@PathVariable long id) throws IOException {

		Lifeguard lifeguard = lifeguardService.findById(id).orElseThrow();

		lifeguard.setPhotoUser(null);
		lifeguard.setImageUser(false);

		lifeguardService.save(lifeguard);

		return ResponseEntity.noContent().build();
	}

    @GetMapping("/api/employer/{id}/offers")
    public List<String> getOffers(@PathVariable int id){
        Optional<Employer> employer = employerService.findById(id);
        List<String> offersList = new ArrayList<String>();
        if (employer.isPresent()){
            if (!employer.get().getOffers().isEmpty()){
                for (Offer offer : employer.get().getOffers()){
                    offersList.add(offer.getPool().getName()+offer.getSalary())
                }
            }
        }
        return offersList;
    }

    @DeleteMapping("/api/offer/{id}/lifeguards") //Only for admin and owner
    public String unSelectProposed(@PathVariable int id){
        Optional<Offer> offer = offerService.findById(id);
        if (offer.isPresent()){
            if(offer.get().getLifeguard()!=null){
                offer.get().setLifeguard(null);
                offerService.save(offer.get());
                Lifeguard l = offer.get().getLifeguard();
                l.setofferAssigned(false);
                l.deleteOfferAccepted(offer.get());
                userService.saveLifeguard(l);
            }
        }
        return "Se ha quitado el socorrista de la oferta";
    }
    @PostMapping("/api/offer/{id}/lifeguards") //Only lifeguards not already applyed
    public String NewApply(@PathVariable int id) {
        Lifeguard l = userService.findLifeguardByEmail(null).get(); //lo catcheas
        Optional<Offer> offer = offerService.findById(id);
        if (offer.isPresent()){
            offer.get().addOffered(l);
            offerService.save(offer.get());
            l.addOffer(offer.get());
            userService.saveLifeguard(l);
        }
        
        return "Has aplicado correctamente";
    }
    @PutMapping("/api/offer/{id}/lifeguards") //Only for admin and owner
    public String selectLifeguard(@RequestBody int id) {
        Lifeguard l = userService.findLifeguardByEmail(null).get(); //lo catcheas
        Optional<Offer> offer = offerService.findById(id);
        if (offer.isPresent()){
            offer.get().setLifeguard(l);;
            offerService.save(offer.get());
            l.setofferAssigned(true);
            l.addOfferAccepted(offer.get());
            userService.saveLifeguard(l);
        }
        
        return "Selecteado correctamente";
    }

}